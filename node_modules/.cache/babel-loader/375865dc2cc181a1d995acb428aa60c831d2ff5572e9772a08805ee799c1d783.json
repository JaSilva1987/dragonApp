{"ast":null,"code":"var _jsxFileName = \"/Users/josesilva/Documents/Projetos/dragonApp/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.tsx\nimport React, { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const login = () => {\n    // Aqui você pode adicionar lógica de autenticação (por exemplo, verificar nome de usuário e senha)\n    setIsAuthenticated(true);\n  };\n  const logout = () => {\n    // Lógica de logout\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"BT2f1XiqCgFHwobQTWR7kond0Ig=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","login","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/josesilva/Documents/Projetos/dragonApp/src/context/AuthContext.tsx"],"sourcesContent":["// src/context/AuthContext.tsx\nimport React, { createContext, useContext, useState, ReactNode } from \"react\";\n\ninterface AuthContextProps {\n  isAuthenticated: boolean;\n  login: () => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextProps | undefined>(undefined);\n\nexport const AuthProvider: React.FC<ReactNode> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const login = () => {\n    // Aqui você pode adicionar lógica de autenticação (por exemplo, verificar nome de usuário e senha)\n    setIsAuthenticated(true);\n  };\n\n  const logout = () => {\n    // Lógica de logout\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9E,MAAMC,WAAW,gBAAGL,aAAa,CAA+BM,SAAS,CAAC;AAE1E,OAAO,MAAMC,YAAiC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMU,KAAK,GAAGA,CAAA,KAAM;IAClB;IACAD,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAF,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,oBACEP,OAAA,CAACC,WAAW,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,eAAe;MAAEE,KAAK;MAAEC;IAAO,CAAE;IAAAL,QAAA,EAC7DA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACV,EAAA,CAlBWF,YAAiC;AAAAa,EAAA,GAAjCb,YAAiC;AAoB9C,OAAO,MAAMc,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGtB,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACkB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}